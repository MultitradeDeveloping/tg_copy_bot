from _libs import *
# from get_from import *
from info import *
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Bot API



def convert_utc_to_gmt3(text):
    lines = text.splitlines()
    result_lines = []

    for line in lines:
        if "UTC" in line:
            try:
                # –í—ã—Ü–µ–ø–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                parts = line.split("**")
                date_part = parts[-1].split("UTC")[0].strip()
                dt = datetime.strptime(date_part, "%Y-%m-%d %H:%M")
                dt_gmt3 = dt + timedelta(hours=3)
                dt_gmt3_str = dt_gmt3.strftime("%Y-%m-%d %H:%M")

                # –ó–∞–º–µ–Ω—è–µ–º –¥–∞—Ç—É –≤–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–µ
                new_line = line.replace(date_part + " UTC", dt_gmt3_str)
                result_lines.append(new_line)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {line}\n{e}")
                result_lines.append(line)
        else:
            result_lines.append(line)
    print("\n".join(result_lines))
    return ("\n".join(result_lines))


async def format(text, src):
    if src == "bybit_tokensplash":
        text = convert_utc_to_gmt3(text)
        text = text.replace("Start", "–°—Ç–∞—Ä—Ç")
        text = text.replace("End", "–ö–æ–Ω–µ—Ü")
        text = text.replace("New user deadline", "–î–µ–¥–ª–∞–π–Ω")
        text = text.replace("New user prize", "–ù–∞–≥—Ä–∞–¥–∞*")
        text = text.replace("~$ ", "")
        text = text.replace("Details", "–î–µ—Ç–∞–ª–∏")

        text = convert_utc_to_gmt3(text)
    if src == "kormushka_mexc":
        if "+" in text:
            text = "*Pump \n\n$" + text
        elif "i" in text:
            text = "*Dump \n\n$" + text
        text = text.replace("in", "–∑–∞")
        text = text.replace("secs", "—Å–µ–∫—É–Ω–¥*")
        text = text.replace("| Limit ~", "\n\n MEXC Limit - *")
        text = text.replace('`', "")
        text = text + "*"
    if src == "mexcTracker":
        # if "support me" in text:
            
        #     text = text.replace("```", "")
        #     text = text.replace("prices have leveled off to", "—Ü–µ–Ω—ã –≤—ã—Ä–æ–≤–Ω—è–ª–∏—Å—å –¥–æ")
        #     text = text.replace("Duration", "*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å*")
        #     text = text.replace("Open", "*–û—Ç–∫—Ä—ã—Ç–∏–µ*")
        #     text = text.replace("Close", "*–ó–∞–∫—Ä—ã—Ç–∏–µ*")
        #     text = text.replace("ATL", "*ATL*")
        #     text = text.replace("ATH", "*ATH*")
        #     text = text.replace("PNL", "*PNL*")

        # elif "difference changed to" in text:
        #     text = text.replace("difference changed to", '—Å–ø—Ä–µ–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è –¥–æ')
            
        
        if "support me" in text:
            
            text = text.replace("source // chat // trackers // support me", "")
            if("Long" in text):
                text = text.replace("| Long", "")
                text = "üü¢Long " + text
            if("Short" in text):
                text = text.replace("| Short", "")
                text = "üî¥Short " + text
            available = ''.join([char for char in text if char in '‚úÖ‚ùå'])
            results = []
            start_index = text.find("Lim/V24")
            text_n = text[start_index:] if start_index != -1 else ""

            for match in re.finditer(r':\s*([^;\n]+)', text_n):
                values = [v.strip().replace('*', '') for v in match.group(1).split('/')]
                results.extend(values)

            print(results)

            text = re.sub(r'```.*?```', '', text, flags=re.DOTALL)
            text = text.replace("*", "")
            
            text = text.replace("Long", "*Long*")
            text = text.replace("Short", "*Short*")
            text = text.replace("Arbitrage", "–ê—Ä–±–∏—Ç—Ä–∞–∂")
            text = text.replace("with", "")
            text = text.replace("ended", "–ø—Ä–æ–¥–ª–∏–ª—Å—è")
            text = text.replace("Price", "*–¶–µ–Ω–∞*")
            
            text = text.replace("CA:", "*–ê–¥—Ä–µ—Å*:")
            text = text.replace("Chain:", "*–ë–ª–æ–∫—á–µ–π–Ω:*")
            text = re.sub(r'Lim/V24.*?(?=Found)', '', text, flags=re.DOTALL)

            text = re.sub(r'–ë–ª–æ–∫—á–µ–π–Ω:\s*(.+)', r'*–ë–ª–æ–∫—á–µ–π–Ω:* \1\n–î–µ–ø–æ–∑–∏—Ç:\n–í—ã–≤–æ–¥:\n\n–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:\nMEXC limit:\n–û–±—å–µ–º 1—á/24—á:', text)
            if available.startswith("‚úÖ"):
                text = text.replace("–î–µ–ø–æ–∑–∏—Ç:", "*–î–µ–ø–æ–∑–∏—Ç: ‚úÖ*")
            if available.startswith("‚ùå"):
                text = text.replace("–î–µ–ø–æ–∑–∏—Ç:", "*–î–µ–ø–æ–∑–∏—Ç: ‚ùå*")
            if available[1] == "‚úÖ":
                text = text.replace("–í—ã–≤–æ–¥:", "*–í—ã–≤–æ–¥: ‚úÖ*")
            if available[1] == "‚ùå":
                text = text.replace("–í—ã–≤–æ–¥:", "*–í—ã–≤–æ–¥: ‚úÖ*")    

            text = text.replace("–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:", f"*–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:* {results[0]}")
            text = text.replace("MEXC limit:", f"*MEXC limit:* {results[2]}")
            text = text.replace("–û–±—å–µ–º 1—á/24—á:", f"*–û–±—å–µ–º 1—á/24—á:* {results[3]}/{results[4]}")
            # text = text.replace("Deposit", "–î–µ–ø–æ–∑–∏—Ç")
            # text = text.replace("Withdrawal", "–í—ã–≤–æ–¥")
            # text = text.replace("Spot", "*—Å–ø–æ—Ç*")

            text = text.replace("Found", "*–ù–∞–π–¥–µ–Ω–æ*")
            text =text.replace("15m", "15–º–∏–Ω")
            text =text.replace("3h", "3—á")
            text =text.replace("24h", "24—á")

            
            text =text.replace("Avg Duration", "*–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å*")
            lines = text.strip().split('\n')
            text = '\n'.join(lines[:-1])
            

        else:
            text = ""
    if src == "DCATrack":
        text = re.sub(r'```.*?```', '', text, flags=re.DOTALL)
        if ("selling" in text or "buying" in text) and "filled and closed" not in text:
            lines = text.strip().split('\n')

            buy = "üü©" in text
            

            words = text.strip().split(' ')
            val = words[0]
            name = words[2]

            text = '\n'.join(lines[1:])
            
            text = re.sub(r'\(\d+\s+cycles\)', '', text)
            # text = re.sub(r'\(\d+\s+cycles\)', '', text)
            
            lines = text.splitlines()
            userline = next((i for i, line in enumerate(lines) if 'User:' in line), None)
            user = lines[userline].strip().split(' ')
            user = user[1]
            
            # for i in range(5):
            #     del lines[userline-2]
            
            text = '\n'.join(lines[:-1])
            user = user.replace("`", "")

            if buy:
                text = f"üü¢ {name} {val}\n"  + text
                text = text.replace('Frequency:', f"[DCA](https://solscan.io/account/{user}) *–ø–æ–∫—É–ø–∞–µ—Ç*")

            else:
                text = f"üî¥ {name} {val}\n" + text
                text = text.replace('Frequency:', f"[DCA](https://solscan.io/account/{user}) *–ø—Ä–æ–¥–∞—ë—Ç*")
            
            text = text.replace('every', '–∫–∞–∂–¥—ã–µ')
            text = text.replace('seconds', '—Å–µ–∫')


            lines = text.splitlines()
            quoteline = next((i for i, line in enumerate(lines) if 'Quote' in line), None)
            if quoteline is not None:
                del lines[quoteline]
            
            text = '\n'.join(lines)

            #–ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º lines
            lines = text.splitlines()
            capline = next((i for i, line in enumerate(lines) if 'MC:' in line), None)
            
            if capline is not None:
                cap = lines[capline].strip().split(' ')
                cap_val = cap[1]
                lq_val = cap[4]

                # —Ç–æ–ª—å–∫–æ –∑–∞–º–µ–Ω–∞ –Ω—É–∂–Ω—ã—Ö —Å—Ç—Ä–æ–∫
                lines[capline] = f"MCap: {cap_val}"
                lines[capline + 1] = f"–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {lq_val}"
            
            l = 3
            while l<capline:
                del lines[3]
                l+=1
            
            lines[2] += '\n'

            # –∑–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ text
            text = '\n'.join(lines)
            
            

            text = text.replace('Price:', '–¶–µ–Ω–∞:')
            text = text.replace('**', '')


     
            # text = '\n'.join(lines)
            user = user.strip('`')

            
            lines = text.splitlines()
            Vline = next((i for i, line in enumerate(lines) if 'V1h' in line), None)
            
            if capline is not None:
                Vwords = lines[Vline].strip().split(' ')
                Vword = Vwords[4]

                lines[Vline] = f"–û–±—ä—ë–º –∑–∞ —á–∞—Å: {Vword}"
            
            text = '\n'.join(lines)

            text = text.replace('Period:', f'–ü–µ—Ä–∏–æ–¥:')
            pattern = r'–ü–µ—Ä–∏–æ–¥: (\d{2} \w+ \d{4} \d{2}:\d{2}:\d{2}) - (\d{2} \w+ \d{4} \d{2}:\d{2}:\d{2}) GMT'
    
            match = re.search(pattern, text)
            if not match:
                return text  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª

            dt_format = "%d %b %Y %H:%M:%S"
            try:
                start = datetime.strptime(match.group(1), dt_format)
                end = datetime.strptime(match.group(2), dt_format)
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –º–µ—Å—è—Ü—ã, –ø—Ä–æ–±—É–µ–º —Ä—É—Å—Å–∫–∏–π
                dt_format = "%d %B %Y %H:%M:%S"
                start = datetime.strptime(match.group(1), dt_format)
                end = datetime.strptime(match.group(2), dt_format)

            start += timedelta(hours=3)
            end += timedelta(hours=3)

            new_period = f"\n–ü–µ—Ä–∏–æ–¥: {start.strftime('%d %b %Y %H:%M:%S')} - {end.strftime('%d %b %Y %H:%M:%S')} GMT+3"

            lines = text.splitlines()
            text = '\n'.join(lines[:-2])
            text = text + '\n' + new_period
            
           

            # –ù–∞–π–¥—ë–º —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî –ü–µ—Ä–∏–æ–¥
            lines = text.strip().splitlines()
            pattern = re.compile(r'^\*?–ü–µ—Ä–∏–æ–¥\b.*', re.IGNORECASE)

            matching_line = None
            remaining_lines = []

            for line in lines:
                if matching_line is None and pattern.match(line.strip()):
                    matching_line = line
                else:
                    remaining_lines.append(line)

            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ, –ø–µ—Ä–µ–Ω–æ—Å—è –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω–µ—Ü
            if matching_line:
                text = '\n'.join(remaining_lines + [matching_line])
            else:
                text = text.strip()

            monthes_en = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
            monthes_ru = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä—Ç–∞', '–ê–ø—Ä','–ú–∞—è', '–ò—é–Ω—è', '–ò—é–ª—è', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è','–î–µ–∫']
            text = re.sub(r'(\b–¶–µ–Ω–∞\s+)(\w+)', r'\1**\2**', text)

            text = text.replace("MCap","*MCap*")
            text = text.replace("–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏","*–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏*")
            text = text.replace("–û–±—ä—ë–º –∑–∞ —á–∞—Å","*–û–±—ä—ë–º –∑–∞ —á–∞—Å*")
            text = text.replace("–¶–µ–Ω–∞","*–¶–µ–Ω–∞*")
            text = text.replace("Futures","*Futures*")
            text = text.replace("CA:","*CA*:")
            text = text.replace("User","*User*")
            text = text.replace("–ü–µ—Ä–∏–æ–¥","*–ü–µ—Ä–∏–æ–¥*")

            for i in range(len(monthes_en)):
                text = text.replace(monthes_en[i], monthes_ru[i])

            
        else: 
            text = ''
    
    return(text)



def send_via_bot(text, to):
    print("—á—ë—Ç –ø—Ä–∏—à–ª–æ")
    url = f"https://api.telegram.org/bot{bot_api}/sendMessage"
    data = {
        "chat_id": channel_tosend_username[0],
        "text": text,
        "message_thread_id": to,
        "parse_mode": "Markdown",
        "disable_web_page_preview": True

    }
    try:
        response = requests.post(url, json=data)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç: {response.status_code}, {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ –±–æ—Ç: {e}")

# async def get_latest_message():
#     await client.start()
#     # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞
#     channel = await client.get_entity("DCATrack")
#     # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     messages = await client.get_messages(channel, limit=20)
#     text = await format(messages[1].text, "DCATrack")
#     send_via_bot(text, "DCATrack")
    
# with client:
#     client.loop.run_until_complete(get_latest_message())